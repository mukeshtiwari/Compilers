### Starting build.
# Target: calc.ml.depends, tags: { extension:ml, file:calc.ml, ocaml, ocamldep, package(ppx_deriving.std), quiet }
ocamlfind ocamldep -package ppx_deriving.std -modules calc.ml > calc.ml.depends # cached
# Target: ast.ml.depends, tags: { extension:ml, file:ast.ml, ocaml, ocamldep, package(ppx_deriving.std), quiet }
ocamlfind ocamldep -package ppx_deriving.std -modules ast.ml > ast.ml.depends # cached
# Target: ast.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:ast.cmo, file:ast.ml, implem, ocaml, package(ppx_deriving.std), quiet }
ocamlfind ocamlc -c -package ppx_deriving.std -o ast.cmo ast.ml # cached
# Target: lexer.mll, tags: { extension:mll, file:lexer.mll, lexer, ocaml, ocamllex, package(ppx_deriving.std), quiet }
/Users/mukeshtiwari/.opam/4.02.1/bin/ocamllex.opt -q lexer.mll
# Target: lexer.ml.depends, tags: { extension:ml, file:lexer.ml, ocaml, ocamldep, package(ppx_deriving.std), quiet }
ocamlfind ocamldep -package ppx_deriving.std -modules lexer.ml > lexer.ml.depends
# Target: parser.mly.depends, tags: { extension:mly, file:parser.mly, menhir_ocamldep, ocaml, ocamldep, package(ppx_deriving.std), quiet }
menhir --raw-depend --ocamldep 'ocamlfind ocamldep -modules' parser.mly > parser.mly.depends # cached
# Target: parser.mly, tags: { byte, compile, extension:mly, file:parser.mly, menhir, ocaml, package(ppx_deriving.std), parser, quiet }
menhir --ocamlc 'ocamlfind ocamlc -package ppx_deriving.std' --infer parser.mly # cached
# Target: parser.mli.depends, tags: { extension:mli, file:parser.mli, ocaml, ocamldep, package(ppx_deriving.std), quiet }
ocamlfind ocamldep -package ppx_deriving.std -modules parser.mli > parser.mli.depends # cached
# Target: parser.cmi, tags: { byte, compile, extension:mli, file:parser.mli, interf, ocaml, package(ppx_deriving.std), quiet }
ocamlfind ocamlc -c -package ppx_deriving.std -o parser.cmi parser.mli # cached
# Target: lexer.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:lexer.cmo, file:lexer.ml, implem, ocaml, package(ppx_deriving.std), quiet }
ocamlfind ocamlc -c -package ppx_deriving.std -o lexer.cmo lexer.ml
# Target: calc.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:calc.cmo, file:calc.ml, implem, ocaml, package(ppx_deriving.std), quiet }
ocamlfind ocamlc -c -package ppx_deriving.std -o calc.cmo calc.ml # cached
# Target: parser.ml.depends, tags: { extension:ml, file:parser.ml, ocaml, ocamldep, package(ppx_deriving.std), quiet }
ocamlfind ocamldep -package ppx_deriving.std -modules parser.ml > parser.ml.depends # cached
# Target: parser.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:parser.cmo, file:parser.ml, implem, ocaml, package(ppx_deriving.std), quiet }
ocamlfind ocamlc -c -package ppx_deriving.std -o parser.cmo parser.ml # cached
# Target: calc.byte, tags: { byte, dont_link_with, extension:byte, file:calc.byte, link, ocaml, package(ppx_deriving.std), program, quiet }
ocamlfind ocamlc -linkpkg -package ppx_deriving.std ast.cmo parser.cmo lexer.cmo calc.cmo -o calc.byte
# Compilation successful.
